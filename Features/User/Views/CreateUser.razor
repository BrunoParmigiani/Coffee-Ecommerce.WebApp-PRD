@page "/create"
@layout LoginLayout
@inject IUserService UserService
@inject IAddressService AddressService
@inject NavigationManager NavManager
@using Coffee_Ecommerce.WebApp.Features.User.Create
@using Coffee_Ecommerce.WebApp.Services
@using Coffee_Ecommerce.WebApp.Services.Interfaces
@using Coffee_Ecommerce.WebApp.Shared.Events
@using Coffee_Ecommerce.WebApp.ThirdParty.GoogleCloud.MapsPlatform


<div class="col-md-4 text-center">
    <h3 class="text-white">Criar sua Conta</h3>

    <div class="rounded-2 align-self-stretch " style="padding: 20px; background-color: #ece0d1;">
        <EditForm Model="Request" OnValidSubmit="Create" FormName="create-user-form">
            <DataAnnotationsValidator />

            <label>Nome</label>
            <ValidationMessage For="() => Request.Name" />
            <InputText @bind-Value="Request.Name" class="form-control text-center"></InputText>
            <br />

            <label>E-mail</label>
            <ValidationMessage For="() => Request.Email" />
            <InputText @bind-Value="Request.Email" class="form-control text-center"></InputText>
            <br />

            <label>CPF</label>
            <ValidationMessage For="() => Request.CPF" />
            <InputText @bind-Value="Request.CPF" class="form-control text-center"></InputText>
            <br />

            <label>Telefone</label>
            <ValidationMessage For="() => Request.PhoneNumber" />
            <InputText @bind-Value="Request.PhoneNumber" class="form-control text-center" placeholder="(DDD) 9XXXX-XXXX"></InputText>
            <br />

            <label>CEP</label>
            <ValidationMessage For="() => Request.PostalCode" />
            <InputText @bind-Value="Request.PostalCode" class="form-control text-center" placeholder="XXXXX-XXX" @onfocusout="GetAddress"></InputText>
            <br />

            <label>Endereço</label>
            @if (GeocodeResponse != null)
            {
                <textarea class="form-control" readonly>@GeocodeResponse.Results[0].FormatedAddress</textarea>
            }
            else
            {
                <textarea class="form-control" readonly></textarea>
            }
            <br />

            <label>Complemento:</label>
            <ValidationMessage For="() => Request.Complement"></ValidationMessage>
            <InputText @bind-Value="Request.Complement" class="form-control text-center" placeholder="Ex.: N° casa, apartamento, etc."></InputText>
            <br />

            <label>Senha</label>
            <ValidationMessage For="() => Request.Password" />
            <InputText @bind-Value="Request.Password" class="form-control text-center"></InputText>
            <br />

            <div>
                <input type="submit" class="btn btn-success" value="Criar Conta" />
                <Button Class="btn btn-secondary" @onclick="RedirectToLogin">Voltar</Button>
            </div>
        </EditForm>

    </div>
</div>

@code {
    private CreateRequest Request { get; set; } = new CreateRequest();

    private GeocodeResponse? GeocodeResponse { get; set; } = null;

    protected override void OnInitialized()
    {
        NewRequestModel();
    }

    private async Task Create()
    {
        try
        {
            _ = await UserService.CreateAsync(Request);

            ToastRaiser.Notifty("Sua conta foi criada com sucesso");

            NavManager.NavigateTo("/login");
        }
        catch (ApiException ex)
        {
            ErrorRaiser.Raise(ex, "Não foi possível criar sua conta");
        }
        catch (HttpRequestException ex)
        {
            ErrorRaiser.Raise($"{ex.GetType()}: Não foi possível criar sua conta");
        }
    }

    private async Task GetAddress()
    {
        if (Request.PostalCode.Length != 9)
        {
            return;
        }

        try
        {
            var response = await AddressService.ValidatePostalCode(Request.PostalCode);

            if (response == null)
                return;

            GeocodeResponse = response;
        }
        catch (ApiException ex)
        {
            ErrorRaiser.Raise(ex, "Não foi possível localizar o endereço");
        }
        catch (HttpRequestException ex)
        {
            ErrorRaiser.Raise($"{ex.GetType()}: Não foi possível localizar o endereço");
        }
    }

    private void NewRequestModel()
    {
        Request = new CreateRequest();
        Request.CPF = CpfGenerator.GenerateCpf();
    }

    private void RedirectToLogin() => NavManager.NavigateTo("/login");
}
