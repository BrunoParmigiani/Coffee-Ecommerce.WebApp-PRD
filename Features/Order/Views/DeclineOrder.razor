@using Coffee_Ecommerce.WebApp.Features.NewOrder
@using Coffee_Ecommerce.WebApp.Features.Order.Create
@using Coffee_Ecommerce.WebApp.Shared.Events
@using Coffee_Ecommerce.WebApp.Shared.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@inject IOrderService OrderService
@inject INewOrderService NewOrderService
@inject OrdersHub OrdersHub

<p>Pedido: @Request.Id</p>

<EditForm Model="Request" OnValidSubmit="SendResponse" FormName="accept-order-form">
    <DataAnnotationsValidator />

    <label>Motivo de rejeição:</label>
    @if (string.IsNullOrWhiteSpace(Request.DeniedReason))
    {
        <p class="text-danger">Insira o motivo da recusa do pedido</p>
    }
    <InputTextArea class="form-control" @bind-Value="Request.DeniedReason"></InputTextArea>
    <br />

    <div class="d-flex">
        <input type="submit" class="btn btn-success" style="margin-right: 10px;" value="Enviar" />
        <Button Class="btn btn-secondary" @onclick="CloseCallback">Voltar</Button>
    </div>
</EditForm>

@code {
    [Parameter]
    public CreateRequest ReceivedOrder { get; set; }

    [SupplyParameterFromForm]
    public CreateRequest Request { get; set; } = new CreateRequest();

    [Parameter]
    public EventCallback<MouseEventArgs> ConfirmCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> CloseCallback { get; set; }

    private HubConnection? hubConnection { get; set; } = null;

    protected override void OnParametersSet()
    {
        Request.Id = ReceivedOrder.Id;
        Request.UserId = ReceivedOrder.UserId;
        Request.PaymentMethod = ReceivedOrder.PaymentMethod;
        Request.EstablishmentId = ReceivedOrder.EstablishmentId;
        Request.DeliveryTime = 0;
        Request.Items = ReceivedOrder.Items;
        Request.DeniedOrder = true;

        hubConnection = OrdersHub.Connection;
    }

    private async Task SendResponse()
    {
        try
        {
            var order = await OrderService.CreateAsync(Request);

            ToastRaiser.Notifty("Pedido rejeitado");

            await hubConnection.SendAsync("SendResponse", order.Id, order.UserId, false);

            await NewOrderService.DeleteAsync(Request.Id);

            await ConfirmCallback.InvokeAsync();

            Request = new CreateRequest();
        }
        catch (ApiException ex)
        {
            ErrorRaiser.Raise(ex, "Não foi possível rejeitar o pedido");
        }
        catch (HttpRequestException ex)
        {
            ErrorRaiser.Raise($"{ex.GetType()}: Não foi possível rejeitar o pedido");
        }
    }
}
