@attribute [Authorize(Roles = "business_owner,commercial_admin")]
@using Coffee_Ecommerce.WebApp.Features.Administrator.ChangePassword
@using Coffee_Ecommerce.WebApp.Shared.Events
@inject IAdministratorService AdminService

<EditForm Model="Request" OnValidSubmit="ChangePassword" FormName="change-admin-password">
    <DataAnnotationsValidator />

    <label>E-mail:</label>
    <InputText @bind-Value="Request.Email" class="form-control" readonly></InputText>
    <br />

    <label>Senha atual:</label>
    <ValidationMessage For="() => Request.CurrentPassword" />
    <InputText @bind-Value="Request.CurrentPassword" class="form-control" type="password"></InputText>
    <br />

    <label>Nova senha:</label>
    <ValidationMessage For="() => Request.NewPassword" />
    <InputText @bind-Value="Request.NewPassword" class="form-control" type="password"></InputText>
    <br />

    <label>Confirme a nova senha:</label>
    <ValidationMessage For="() => Request.ConfirmNewPassword" />
    <InputText @bind-Value="Request.ConfirmNewPassword" class="form-control" type="password"></InputText>
    <br />

    <div class="d-flex">
        <input type="submit" class="btn btn-success" style="margin-right: 10px;" value="Trocar senha" />
        <Button Class="btn-primary" @onclick="CloseCallback">Cancelar</Button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private ChangeCredentials Request { get; set; } = new ChangeCredentials();

    [Parameter]
    public AdministratorEntity Admin { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> CloseCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> ConfirmCallback { get; set; }

    protected override void OnParametersSet()
    {
        Request.Email = Admin.Email;
    }

    private async Task ChangePassword()
    {
        if (Request.NewPassword != Request.ConfirmNewPassword)
        {
            ErrorRaiser.Raise("A senha de confirmação é diferente da nova senha");
            return;
        }

        try
        {
            _ = await AdminService.ChangePasswordAsync(Request);

            ToastRaiser.Notifty("Troca de senha realizada");

            await ConfirmCallback.InvokeAsync();
        }
        catch (ApiException ex)
        {
            ErrorRaiser.Raise(ex, "Não foi possível atualizar o administrador");
        }
        catch (HttpRequestException ex)
        {
            ErrorRaiser.Raise($"{ex.GetType()}: Não foi possível atualizar o administrador");
        }
    }
}
